<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-bug"></i> Bug Bounty Lab
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/xss">‚Üê Back to XSS Lab</a>
                <a class="nav-link" href="/">Dashboard</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <h1><i class="fas fa-window-maximize"></i> DOM-based XSS</h1>
                <p class="lead">Practice DOM-based XSS attacks that occur entirely in the browser.</p>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-info text-white">
                        <h5 class="card-title mb-0">Test DOM XSS</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="search" class="form-label">Search Query</label>
                            <input type="text" class="form-control" id="search" 
                                   placeholder="Enter search query">
                        </div>
                        <button type="button" class="btn btn-info" onclick="performSearch()">
                            <i class="fas fa-search"></i> Search
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-success text-white">
                        <h5 class="card-title mb-0">Search Results</h5>
                    </div>
                    <div class="card-body">
                        <div id="results">
                            <p class="text-muted">Enter a search query to see results</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-12">
                <div class="alert alert-warning">
                    <h4><i class="fas fa-lightbulb"></i> Try These Payloads</h4>
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Basic DOM XSS:</h6>
                            <div class="payload-example">
                                <code>&lt;script&gt;alert('DOM XSS')&lt;/script&gt;</code>
                            </div>
                            <div class="payload-example">
                                <code>&lt;img src=x onerror=alert('DOM XSS')&gt;</code>
                            </div>
                            <div class="payload-example">
                                <code>&lt;svg onload=alert('DOM XSS')&gt;</code>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Advanced DOM XSS:</h6>
                            <div class="payload-example">
                                <code>javascript:alert('DOM XSS')</code>
                            </div>
                            <div class="payload-example">
                                <code>&lt;iframe src="javascript:alert('DOM XSS')"&gt;</code>
                            </div>
                            <div class="payload-example">
                                <code>&lt;body onload=alert('DOM XSS')&gt;</code>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-12">
                <div class="alert alert-danger">
                    <h4><i class="fas fa-exclamation-triangle"></i> DOM-based XSS Details</h4>
                    <p><strong>Type:</strong> DOM-based Cross-Site Scripting</p>
                    <p><strong>Root Cause:</strong> Client-side JavaScript directly manipulates the DOM using user-controlled data without proper sanitization.</p>
                    <p><strong>Impact:</strong> Session hijacking, keylogging, phishing, malware distribution, and client-side attacks.</p>
                    <p><strong>Fix:</strong> Properly sanitize and validate all user input before using it in DOM manipulation functions.</p>
                </div>
            </div>
        </div>
    </div>

    <footer class="bg-dark text-white text-center py-3 mt-5">
        <div class="container">
            <p class="mb-0">&copy; 2024 Bug Bounty Lab. Educational purposes only.</p>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // VULNERABLE: DOM-based XSS
        function performSearch() {
            const searchQuery = document.getElementById('search').value;
            const resultsDiv = document.getElementById('results');
            
            // VULNERABLE: Direct innerHTML assignment without sanitization
            resultsDiv.innerHTML = '<h6>Search Results for: "' + searchQuery + '"</h6>' +
                                 '<p>No results found for your search query.</p>' +
                                 '<p><em>Note: This is a demonstration of DOM-based XSS vulnerability.</em></p>';
        }
        
        // Also vulnerable to URL-based DOM XSS
        function getUrlParameter(name) {
            name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
            const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
            const results = regex.exec(location.search);
            return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
        }
        
        // Check for URL parameters on page load
        window.onload = function() {
            const urlParam = getUrlParameter('q');
            if (urlParam) {
                document.getElementById('search').value = urlParam;
                performSearch();
            }
        };
    </script>
</body>
</html>
